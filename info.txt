- Finding papers / models for houes prediction using NN
- Trying to build a model using keras.
- Perhaps it is better to start without selu and then add selu after we have predictions working

Added more features, learning stopped.. Need to investigate

Bibliograhpy/references:
- Neural Network Based Model for Predicting Housing Market
Performance
Ahmed Khalafallah**
Department of Civil, Environmental, and Construction Engineering,
University of Central Florida, Orlando, FL 32816-2450, USA

- https://nataliarslan.com/otherprojects/2017/9/26/predicting-house-prices-in-stockholm-using-tensorflow

- A Neural Network based model for real estate price estimation
considering environmental quality of property location

House price prediction using neural networks

Adam , 6000 iteracji

Next Step:
 improve, Selu, other optimizers

# 10 epochs
melbourne_model = keras.models.Sequential()
melbourne_model.add(keras.layers.Dense(20, activation='tanh',input_dim=len(input_features)))
melbourne_model.add(keras.layers.Dense(20, activation='tanh'))
melbourne_model.add(keras.layers.Dense(1, activation='relu'))   # MAE: 922165

# 20 epochs
melbourne_model = keras.models.Sequential()
melbourne_model.add(keras.layers.Dense(20, activation='tanh',input_dim=len(input_features)))
melbourne_model.add(keras.layers.Dense(20, activation='tanh'))
melbourne_model.add(keras.layers.Dense(1, activation='relu'))   # MAE: 462209


# 30 epochs
melbourne_model = keras.models.Sequential()
melbourne_model.add(keras.layers.Dense(20, activation='tanh',input_dim=len(input_features)))
melbourne_model.add(keras.layers.Dense(20, activation='tanh'))
melbourne_model.add(keras.layers.Dense(1, activation='relu'))   # 'MAE:', 529127.20319561008

# 1000 epochs
melbourne_model = keras.models.Sequential()
melbourne_model.add(keras.layers.Dense(20, activation='tanh',input_dim=len(input_features)))
melbourne_model.add(keras.layers.Dense(20, activation='tanh'))
melbourne_model.add(keras.layers.Dense(1, activation='relu'))   # 'MAE:', 460326

# 100 epochs (Adam)

melbourne_model = keras.models.Sequential()
melbourne_model.add(keras.layers.Dense(20, activation='tanh',input_dim=len(input_features)))
melbourne_model.add(keras.layers.Dense(20, activation='tanh'))
melbourne_model.add(keras.layers.Dense(1, activation='relu'))   # 'MAE:', 1060400
===========================================
- reproducing : House price prediction : hedonic price model vs artificial neural network




==========================================================================================
 Relu
20 input neurons , 20 hidden , 1 final. All Relu activations 

    input_features = ['Address','Bathroom','Bedroom2','BuildingArea','Car','CouncilArea', 'Date', 'Distance', 'Landsize', 'Lattitude', 'Longtitude', 'Method', 'Postcode', 'Price', 'Propertycount', 'Regionname', 'Rooms', 'SellerG', 'Suburb', 'Type', 'YearBuilt']

Train : Val 80:20

Infer on best weights
('MAE:', 22.866146001452549)
loss: 1636.33
-------------------------------------------------------
20 input neurons , 20 hidden , 1 final. Tanh, tanh, relu
Poor convergence .. Adam optimizer

    input_features = ['Address','Bathroom','Bedroom2','BuildingArea','Car','CouncilArea', 'Date', 'Distance', 'Landsize', 'Lattitude', 'Longtitude', 'Method', 'Postcode', 'Price', 'Propertycount', 'Regionname', 'Rooms', 'SellerG', 'Suburb', 'Type', 'YearBuilt']

==================================================
SNN




Next Step:
1) make it working on train and test. and prepare for kaggle submission
2) reproduce results
